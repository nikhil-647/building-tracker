// This is your Prisma schema file
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===========================================================
// 1️⃣ ENUMS - Define custom types for muscle groups and status
// ===========================================================
enum MuscleGroupEnum {
  Chest
  Back
  Shoulder
  Legs
  Bicep
  Tricep
  Abs
  Cardio
}

enum ActivityStatusEnum {
  pending
  completed
}

// ===========================================================
// 2️⃣ USER MODEL - Stores user authentication and profile info
// ===========================================================
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique @db.VarChar(100)
  name      String   @db.VarChar(100)
  password  String   @db.VarChar(255)
  image     String?  @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  addedExercises     Exercise[]         @relation("ExerciseAddedBy")
  exercisePlans      ExercisePlan[]
  workoutLogs        WorkoutLog[]
  dailyActivityPlans DailyActivityPlan[]
  activityLogs       ActivityLog[]

  @@map("users")
}

// ===========================================================
// 3️⃣ MUSCLE GROUP - Predefined muscle groups (Chest, Back, etc.)
// ===========================================================
model MuscleGroup {
  id   Int              @id @default(autoincrement())
  name MuscleGroupEnum  @unique

  // Relations
  exercises         Exercise[]
  exercisePlans     ExercisePlan[]

  @@map("muscle_group")
}

// ===========================================================
// 4️⃣ EXERCISES - Master list of all exercises
// ===========================================================
model Exercise {
  id            Int       @id @default(autoincrement())
  muscleGroupId Int       @map("muscle_group_id")
  exerciseName  String    @map("exercise_name") @db.VarChar(100)
  image         String?   @db.Text
  addedBy       Int?      @map("added_by")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  muscleGroup       MuscleGroup       @relation(fields: [muscleGroupId], references: [id], onDelete: Cascade)
  user              User?             @relation("ExerciseAddedBy", fields: [addedBy], references: [id], onDelete: Cascade)
  exercisePlans     ExercisePlan[]

  @@index([addedBy], map: "idx_exercise_user")
  @@map("exercises")
}

// ===========================================================
// 5️⃣ EXERCISE PLAN - User's custom workout plan per muscle group
// ===========================================================
// Each row represents ONE exercise in a user's plan
// A user can have multiple exercises per muscle group (multiple rows)
model ExercisePlan {
  id              Int       @id @default(autoincrement())
  exerciseId      Int       @map("exercise_id")
  exerciseGroupId Int       @map("exercise_group_id")
  userId          Int       @map("user_id")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  exercise     Exercise       @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  muscleGroup  MuscleGroup    @relation(fields: [exerciseGroupId], references: [id], onDelete: Cascade)
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutLogs  WorkoutLog[]

  // Prevents duplicate: same user + same muscle group + same exercise
  @@unique([userId, exerciseGroupId, exerciseId])
  @@index([userId], map: "idx_exercise_plan_user")
  @@index([exerciseId], map: "idx_exercise_plan_exercise")
  @@map("exercise_plan")
}

// ===========================================================
// 6️⃣ WORKOUT LOG - User's workout logs (weight, reps, etc.)
// ===========================================================
model WorkoutLog {
  id         Int      @id @default(autoincrement())
  templateId Int      @map("template_id") // References ExercisePlan.id
  setNo      Int      @map("set_no")
  weight     Float?
  reps       Int?
  userId     Int      @map("user_id")
  date       DateTime @db.Date
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  exercisePlan ExercisePlan @relation(fields: [templateId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([templateId, setNo, userId, date])
  @@index([userId], map: "idx_workout_log_user")
  @@map("workout_log")
}

// ===========================================================
// 7️⃣ DAILY ACTIVITY PLAN - User's daily activity plan (steps, water, etc.)
// ===========================================================
model DailyActivityPlan {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  date       DateTime @db.Date
  activities String[] // e.g., ['10K steps', '8 glass water']
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  activityLogs   ActivityLog[]

  @@index([userId], map: "idx_daily_activity_plan_user")
  @@map("daily_activity_plan")
}

// ===========================================================
// 8️⃣ ACTIVITY LOG - Tracking completion status of daily activities
// ===========================================================
model ActivityLog {
  id                   Int                @id @default(autoincrement())
  dailyActivityPlanId  Int                @map("daily_activity_plan_id")
  userId               Int                @map("user_id")
  status               ActivityStatusEnum @default(pending)
  createdAt            DateTime           @default(now()) @map("created_at")
  updatedAt            DateTime           @updatedAt @map("updated_at")

  // Relations
  dailyActivityPlan DailyActivityPlan @relation(fields: [dailyActivityPlanId], references: [id], onDelete: Cascade)
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_activity_log_user")
  @@map("activity_log")
}

